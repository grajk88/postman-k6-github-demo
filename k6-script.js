// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import "./libs/shim/expect.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "GetUsers",
    id: "f33dbd09-60e0-4649-adf3-22d1222f4ee7",
    method: "GET",
    address: "https://reqres.in/api/users?page=2",
    post(response) {
      pm.test("Response status code is 200", function() {
        pm.response.to.have.status(200);
      });

      pm.test(
        "Validate the 'page' field is a non-negative integer",
        function() {
          const responseData = pm.response.json();

          pm.expect(responseData).to.be.an("object");
          pm.expect(responseData.page).to.be.a("number");
          pm.expect(responseData.page).to.be.at.least(0);
        }
      );

      pm.test(
        "Validate 'per_page' field is a non-negative integer",
        function() {
          const responseData = pm.response.json();

          pm.expect(responseData.per_page).to.be.a("number");
          pm.expect(responseData.per_page).to.be.at.least(
            0,
            "'per_page' should be a non-negative integer"
          );
        }
      );

      pm.test(
        "Validate the 'total' field is a non-negative integer",
        function() {
          const responseData = pm.response.json();

          pm.expect(responseData.total).to.exist.and.to.be.a("number");
          pm.expect(responseData.total).to.be.at.least(
            0,
            "Value should be non-negative"
          );
        }
      );

      pm.test(
        "Validate total_pages field is a non-negative integer",
        function() {
          const responseData = pm.response.json();

          pm.expect(responseData.total_pages).to.be.a("number");
          pm.expect(responseData.total_pages).to.be.at.least(0);
        }
      );

      pm.test(
        "Verify that the 'data' field is an array and contains at least one element",
        function() {
          const responseData = pm.response.json();

          pm.expect(responseData.data)
            .to.be.an("array")
            .and.to.have.lengthOf.at.least(1);
        }
      );

      pm.test(
        "Each element in the 'data' array has the required fields",
        function() {
          const responseData = pm.response.json();

          pm.expect(responseData.data).to.be.an("array").that.is.not.empty;

          responseData.data.forEach(function(element) {
            pm.expect(element).to.be.an("object");
            pm.expect(element.id).to.exist;
            pm.expect(element.email).to.exist;
            pm.expect(element.first_name).to.exist;
            pm.expect(element.last_name).to.exist;
            pm.expect(element.avatar).to.exist;
          });
        }
      );

      pm.test(
        "Verify that the 'support' field is an object and contains the required fields - url and text",
        function() {
          const responseData = pm.response.json();

          pm.expect(responseData.support).to.be.an("object");
          pm.expect(responseData.support.url).to.exist.and.to.be.a("string");
          pm.expect(responseData.support.text).to.exist.and.to.be.a("string");
        }
      );

      pm.test("Response time is within an acceptable range", function() {
        pm.expect(pm.response.responseTime).to.be.below(500);
      });

      pm.test("Response time is less than 1000ms", function() {
        pm.expect(pm.response.responseTime).to.be.below(1000);
      });

      pm.test(
        "Verify that the 'page' field is present and is a non-negative integer",
        function() {
          const responseData = pm.response.json();

          pm.expect(responseData.page).to.exist.and.to.be.a("number");
          pm.expect(responseData.page).to.be.at.least(0);
        }
      );

      pm.test(
        "Verify that the 'per_page' field is present and is a non-negative integer",
        function() {
          const responseData = pm.response.json();

          pm.expect(responseData).to.be.an("object");
          pm.expect(responseData.per_page).to.exist.and.to.be.a("number");
          pm.expect(responseData.per_page).to.be.at.least(
            0,
            "'per_page' should be a non-negative integer"
          );
        }
      );

      pm.test(
        "Verify that the 'total' field is present and is a non-negative integer",
        function() {
          const responseData = pm.response.json();

          pm.expect(responseData).to.be.an("object");
          pm.expect(responseData.total).to.exist.and.to.be.a("number");
          pm.expect(responseData.total).to.be.at.least(
            0,
            "'total' field should be a non-negative integer"
          );
        }
      );

      pm.test(
        "Verify 'total_pages' field is present and is a non-negative integer",
        function() {
          const responseData = pm.response.json();

          pm.expect(responseData).to.be.an("object");
          pm.expect(responseData.total_pages).to.exist.and.to.be.a("number");
          pm.expect(responseData.total_pages).to.be.at.least(0);
        }
      );

      // Performance test - Check if the response time is less than 500ms
      pm.test("Response time is less than 500ms", function() {
        pm.expect(pm.response.responseTime).to.be.below(500);
      });

      // Performance test - Check if the response time is less than 1000ms
      pm.test("Response time is less than 1000ms", function() {
        pm.expect(pm.response.responseTime).to.be.below(1000);
      });
    }
  });

  postman[Request]({
    name: "CreateUser",
    id: "8287c542-7050-4c4f-8717-05b7fafc346f",
    method: "POST",
    address: "https://reqres.in/api/users",
    data: '{\n    "name": "morpheus",\n    "job": "leader"\n}',
    post(response) {
      pm.test("Response status code is 201", function() {
        pm.expect(pm.response.code).to.equal(201);
      });

      pm.test(
        "Response has the required fields - id and createdAt",
        function() {
          const responseData = pm.response.json();

          pm.expect(responseData).to.be.an("object");
          pm.expect(responseData.id).to.exist.and.to.be.a(
            "string",
            "id should be a string"
          );
          pm.expect(responseData.createdAt).to.exist.and.to.be.a(
            "string",
            "createdAt should be a string"
          );
        }
      );

      pm.test("ID field is a non-empty string", function() {
        const responseData = pm.response.json();

        pm.expect(responseData.id)
          .to.be.a("string")
          .and.to.have.lengthOf.at.least(1, "ID field should not be empty");
      });

      pm.test("CreatedAt field is a valid date format", function() {
        const responseData = pm.response.json();

        pm.expect(responseData.createdAt).to.match(
          /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$/,
          "CreatedAt field is not in valid date format"
        );
      });

      pm.test("Response time is less than 500ms", function() {
        pm.expect(pm.response.responseTime).to.be.below(500);
      });

      pm.test(
        "Response has required fields - email, first_name, and last_name",
        function() {
          const responseData = pm.response.json();

          pm.expect(responseData).to.be.an("object");
          pm.expect(responseData.email).to.exist.and.to.be.a("string");
          pm.expect(responseData.first_name).to.exist.and.to.be.a("string");
          pm.expect(responseData.last_name).to.exist.and.to.be.a("string");
        }
      );

      pm.test("Email is in a valid email format", function() {
        const responseData = pm.response.json();

        pm.expect(responseData).to.be.an("object");
        pm.expect(responseData.email).to.match(
          /^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/
        );
      });

      pm.test("Verify that the 'id' is a non-empty string", function() {
        const responseData = pm.response.json();

        pm.expect(responseData.id)
          .to.be.a("string")
          .and.to.have.lengthOf.at.least(1, "Value should not be empty");
      });

      pm.test("Verify that 'createdAt' is a valid date format", function() {
        const responseData = pm.response.json();

        pm.expect(responseData).to.be.an("object");
        pm.expect(responseData.createdAt).to.match(
          /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$/,
          "Value should be a valid date format"
        );
      });

      pm.test("Response time is less than 1000ms", function() {
        pm.expect(pm.response.responseTime).to.be.below(1000);
      });

      pm.test("Verify that the response status code is 201", function() {
        pm.response.to.have.status(201);
      });

      pm.test("Verify that the 'id' field is a non-empty string", function() {
        const responseData = pm.response.json();

        pm.expect(responseData.id)
          .to.be.a("string")
          .and.to.have.lengthOf.at.least(1, "Value should not be empty");
      });

      pm.test("Verify 'createdAt' field is a valid date format", function() {
        const responseData = pm.response.json();

        pm.expect(responseData.createdAt).to.match(
          /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/,
          "Invalid date format"
        );
      });

      pm.test("Response time is less than 500ms", function() {
        pm.expect(pm.response.responseTime).to.be.below(500);
      });

      pm.test(
        "Verify that the response has the required fields - email, first_name, and last_name",
        function() {
          const responseData = pm.response.json();

          pm.expect(responseData).to.be.an("object");
          pm.expect(responseData.email).to.exist.and.to.be.a("string");
          pm.expect(responseData.first_name).to.exist.and.to.be.a("string");
          pm.expect(responseData.last_name).to.exist.and.to.be.a("string");
        }
      );
    }
  });
}
