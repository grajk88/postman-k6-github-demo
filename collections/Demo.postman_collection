{
	"info": {
		"_postman_id": "1dde05e4-2ff1-4059-9d88-4804e5306c4a",
		"name": "Demo Collection (reqres.in)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3433872",
		"_collection_link": "https://www.postman.com/vgrk/workspace/learning-workspace/collection/3433872-1dde05e4-2ff1-4059-9d88-4804e5306c4a?action=share&source=collection_link&creator=3433872"
	},
	"item": [
		{
			"name": "GetUsers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'page' field is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.page).to.be.a('number');",
							"  pm.expect(responseData.page).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Validate 'per_page' field is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.per_page).to.be.a('number');",
							"    pm.expect(responseData.per_page).to.be.at.least(0, \"'per_page' should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'total' field is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.total).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.total).to.be.at.least(0, \"Value should be non-negative\");",
							"});",
							"",
							"",
							"pm.test(\"Validate total_pages field is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.total_pages).to.be.a('number');",
							"    pm.expect(responseData.total_pages).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' field is an array and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Each element in the 'data' array has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.data.forEach(function (element) {",
							"        pm.expect(element).to.be.an('object');",
							"        pm.expect(element.id).to.exist;",
							"        pm.expect(element.email).to.exist;",
							"        pm.expect(element.first_name).to.exist;",
							"        pm.expect(element.last_name).to.exist;",
							"        pm.expect(element.avatar).to.exist;",
							"    });",
							"});",
							"",
							"pm.test(\"Verify that the 'support' field is an object and contains the required fields - url and text\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.support).to.be.an('object');",
							"    pm.expect(responseData.support.url).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.support.text).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'page' field is present and is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.page).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.page).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'per_page' field is present and is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.per_page).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.per_page).to.be.at.least(0, \"'per_page' should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'total' field is present and is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.total).to.exist.and.to.be.a('number');",
							"  pm.expect(responseData.total).to.be.at.least(0, \"'total' field should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Verify 'total_pages' field is present and is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.total_pages).to.exist.and.to.be.a('number');",
							"  pm.expect(responseData.total_pages).to.be.at.least(0);",
							"});",
							"",
							"// Performance test - Check if the response time is less than 500ms",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"// Performance test - Check if the response time is less than 1000ms",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users?page=2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				},
				"description": "\nThis API endpoint is a HTTP GET request to retrieve a list of users from the ReqRes API. The request is made to the URL `https://reqres.in/api/users?page=2`, where the `page` parameter is set to 2.\n\nThe response returned by the last execution of this request had a status code of 200, indicating a successful response. The response body contained the following data:\n\n```json\n{\n  \"page\": 0,\n  \"per_page\": 0,\n  \"total\": 0,\n  \"total_pages\": 0,\n  \"data\": [\n    {\n      \"id\": 0,\n      \"email\": \"\",\n      \"first_name\": \"\",\n      \"last_name\": \"\",\n      \"avatar\": \"\"\n    }\n  ],\n  \"support\": {\n    \"url\": \"\",\n    \"text\": \"\"\n  }\n}\n```\n\nThe response body includes information about the page, per_page, total number of users, total number of pages, and an array of user data. Each user object in the `data` array has properties such as `id`, `email`, `first_name`, `last_name`, and `avatar`. The `support` object provides additional information with properties `url` and `text`.\n\nPlease note that the response from this endpoint does not contain any actual user data, as the example response shows empty strings or default values for all user properties.\n\nTo use this endpoint, you can make a GET request to the provided URL with the desired page number as a query parameter. The response will provide information about the users on that page.\n\n"
			},
			"response": []
		},
		{
			"name": "CreateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id and createdAt\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.exist.and.to.be.a('string', \"id should be a string\");",
							"  pm.expect(responseData.createdAt).to.exist.and.to.be.a('string', \"createdAt should be a string\");",
							"});",
							"",
							"",
							"pm.test(\"ID field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID field should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"CreatedAt field is a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt field is not in valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields - email, first_name, and last_name\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.email).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.first_name).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.last_name).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid email format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'id' is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that 'createdAt' is a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Value should be a valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'id' field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify 'createdAt' field is a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response has the required fields - email, first_name, and last_name\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.email).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.first_name).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.last_name).to.exist.and.to.be.a('string');",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"leader\"\n}"
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		}
	]
}